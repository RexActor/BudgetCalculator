@model BudgetCalculator.Data.ViewModels.WeeklyBudgetVM;
@using BudgetCalculator.Finance.Calendar;
@using BudgetCalculator.Models;

@{

	ViewData["Title"] = "Budget View";
	var firstDate = new DateTime(Model!.Budget!.Year - 1, 12, 31);
	var weekComencingDate = @firstDate.AddDays((@Model.WeekNumber - 1) * 7);
	int monthIndex = @FinanceCalendar.FinanceCalendarWeekModel.Keys.ToList().IndexOf(Model.MonthName ?? default!);
	var prevWeekDisable = "disabled";
	var nextWeekDisable = "disabled";





}

<div class="card shadow ">
	<div class="row m-auto g-0 justify-content-center">
		<div class="card-header text-center ">
			<h2>@Model.Budget.MonthName Week @Model.WeekNumber Daily Split</h2>
		</div>

		<div class="card-body g-0 sticky-top ">
			<nav aria-label="page navigation ">
				<ul class="pagination justify-content-center">
					<li class="page-item @prevWeekDisable">
						<a class="page-link" asp-action="EditWeek" asp-route-id="">
							<span aria-hidden="true">&laquo;</span>
						</a>
					</li>
					@if (ViewBag.WeeklyBudgets is not null)
					{
						@foreach (var week in ViewBag.WeeklyBudgets)
						{
							var activeLink = week.Key == Model.WeekNumber ? "active" : "";
							<li class="page-item @activeLink">
								<a class="text-center page-link" asp-action="EditWeek" asp-route-id="@week.Value">WK @week.Key</a>
							</li>
						}
					}

					<li class="page-item @nextWeekDisable">
						<a class="page-link" asp-action="EditWeek" asp-route-id="">
							<span aria-hidden="true">&raquo;</span>
						</a>
					</li>
				</ul>
			</nav>
		</div>

		@for (int i = 0; i < 7; i++)
		{
			var dayofWeek = @weekComencingDate.AddDays(i).DayOfWeek;
			var dateOfDay = @weekComencingDate.AddDays(i).ToShortDateString();

			var casesOfday = Model.dailyBudgets.Where(item => item.budgetDate == DateTime.Parse(dateOfDay)).Select(item => item.DailyCases).FirstOrDefault();
			double TotalDailyMinutes = Math.Truncate(Model.dailyBudgets.Where(item => item.budgetDate == DateTime.Parse(dateOfDay)).Select(item => item.DailyTotalMinutes).FirstOrDefault() * 1000) / 1000;
			double TotalDailyHoursAllowed = Math.Truncate(Model.dailyBudgets.Where(item => item.budgetDate == DateTime.Parse(dateOfDay)).Select(item => item.DailyAllowedHours).FirstOrDefault() * 1000) / 1000;

			double totalHorsForDay = 0;
			double AgencyHoursAvailable = 0;


			<div class="col-md-5 col-xs-6 border-primary mb-3 g-3" style="font-size:14px;">
				<div class="card">
					<div class="row bg-light g-0 ">
						<div class="card-header">
							<h3 class="text-center card-title ">
								<span class="fw-bolder">@dayofWeek</span>
								<span class="fs-5 fw-bolder text-secondary text-decoration-underline">@dateOfDay</span>
								<a asp-action="CompleteDate" asp-route-week="@Model.WeekNumber" asp-route-budgetId="@Model.Id" asp-route-date="@dateOfDay"><span class="float-end text-success"><i class="bi bi-clipboard-check"></i></span></a>
							</h3>
						</div>

						<div class="col-md-6">
							<div class="card-body">
								<p class="card-text text-secondary"><b>WC date:</b><span class="text-success fw-bolder"> @weekComencingDate.ToShortDateString()</span> </p>
								<p class="card-text text-secondary"><b>Week:</b><span class="text-success fw-bolder"> @Model.WeekNumber</span></p>
								<p class="card-text text-secondary"><b>Month:</b><span class="text-success fw-bolder"> @Model.MonthName</span></p>
							</div>
						</div>

						<div class="col-md-6">
							<div class="card-body">
								@{
									double TotalWeeklyProductiveHours = (Model.AgencyProductiveHours + Model.DirectProductiveHours);
									double allowedMinutesPerCase = Math.Round(((TotalWeeklyProductiveHours / (float)Model.Cases)) * 60, 3);

								}
								<div class="form-floating">
									<p class="card-text text-secondary"><b>Cases: </b><span class="text-success fw-bolder">@casesOfday</span></p>
								</div>
								<p class="card-text text-secondary"><b>Av. Monthly mins/case:</b><span class="text-success fw-bolder"> @allowedMinutesPerCase</span></p>
								<p class="card-text text-secondary"><b>Total Minutes:</b> <span class="text-success fw-bolder">@TotalDailyMinutes</span></p>
								<p class="card-text text-secondary"><b>Hours Allowed:</b>  <span class="text-success fw-bolder">@TotalDailyHoursAllowed</span></p>
							</div>
						</div>

						<div class="row">
							<div class="col-md-12">
								<p class="text-decoration-underline"><b>DIRECT HC Only Input</b></p>
								<table class="table table-borderless text-center">
									<thead>
										<tr class="table-bordered text-secondary" style="border-bottom: thin solid; border-color:gray;">
											<th title="Cost Center">CC</th>
											<th>Direct Role</th>
											<th title="Head Count">HC</th>
											<th>Hrs shift/person</th>
											<th>Total Hours</th>
										</tr>
									</thead>

									<tbody>


										@for (int x = 0; x < Model.dailyBudgets.Count; x++)
										{
											if (@Model.dailyBudgets[x].budgetDate == DateTime.Parse(dateOfDay))
											{
												for (int b = 0; b < Model.dailyBudgets[x].DailyRoles.Count; b++)
												{

													<tr class="text-success fw-bolder ">
														<td class="" title="Cost Center">@Model!.CostCenter!.Name</td>
														<td class="">@Model.dailyBudgets[x].DailyRoles[b].Name</td>
														<td class="" title="Head Count"> @Model.dailyBudgets[x].DailyRoles[b].DailyHeadCountOfRole</td>
														<td class=""> @Model.dailyBudgets[x].DailyRoles[b].DailyHoursOfRole</td>
														<td class=""> @Model.dailyBudgets[x].DailyRoles[b].DailyTotalHoursOfRole  </td>
													</tr>
													totalHorsForDay += @Model.dailyBudgets[x].DailyRoles[b].DailyTotalHoursOfRole;
												}

											}
										}





										<tr>
											<td></td>
											<td class="text-end text-secondary" style="border-bottom: thin solid; border-color:gray;" colspan="2"><b>Direct Hours:</b></td>
											<td></td>




											<td class="text-center" style="border-bottom: thin solid; border-color:gray;"><span class="fw-bolder">@totalHorsForDay</span></td>
										</tr>
										<tr>
											@{

												AgencyHoursAvailable = TotalDailyHoursAllowed - totalHorsForDay < 0 ? 0 : TotalDailyHoursAllowed - totalHorsForDay;

												var AgencyHeadCount = Math.Floor(AgencyHoursAvailable / 8);

											}
											<td class="text-end text-secondary" colspan="3"><b>Agency Hours:</b></td>
											<td class="text-center"><span class="fw-bolder">@Math.Floor(AgencyHoursAvailable)</span></td>
											<td></td>
										</tr>
										<tr>
											<td></td>
											<td class="text-end text-secondary" style="border-bottom: thin solid; border-color:gray;" colspan="2"><b>Agency Available:</b></td>
											<td class="text-center" style="border-bottom: thin solid; border-color:gray;" colspan="1"><span class="fw-bolder">@AgencyHeadCount</span></td>
											<td></td>
										</tr>
									</tbody>
								</table>
							</div>

						</div>
						<div class="card-footer g-0 text-end text-muted" style="font-size:0.8rem;">
							<span>
								Last Updated: @DateTime.Now.ToLongDateString() by {User}
							</span>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>


@{
	var controller = ViewContext.RouteData.Values["controller"];
}
@section header{

	<div class="text-white align-text-top">
		<a class="btn  btn-secondary" asp-controller="@controller" asp-action="Weekly" asp-action="Weekly" asp-route-year="@Model.Budget.Year" asp-route-costCenterId="@Model.Budget.CostCenter.Id" asp-route-monthIndex="@monthIndex">
			<i class="bi bi-calendar-week" style=" vertical-align: 0.130em;"></i> Return To @Model.MonthName weekly view
		</a>
	</div>
}